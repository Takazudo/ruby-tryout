var search_data = {"index":{"searchIndex":["rack","builder","sinatra","application","commonlogger","extendedrack","helpers","stream","application","base","templates","contenttyped","wrapper","request","acceptentry","response","showexceptions","<<()","<=>()","accept()","accept?()","attachment()","back()","body()","body=()","builder()","cache_control()","call()","call()","call()","call()","call()","call_without_check()","callback()","client_error?()","close()","closed?()","coffee()","content_type()","creole()","defer()","each()","each()","erb()","error()","erubis()","etag()","etag_matches?()","expires()","find_template()","finish()","forward()","forwarded?()","halt()","haml()","headers()","helpers()","idempotent?()","informational?()","inspect()","last_modified()","less()","link?()","liquid()","logger()","markaby()","markdown()","method_missing()","mime_type()","new()","new()","new()","new()","new()","new()","new()","nokogiri()","not_found()","not_found?()","options()","pass()","preferred_type()","priority()","rabl()","radius()","rdoc()","redirect()","redirect?()","respond_to?()","safe?()","sass()","schedule()","scss()","send_file()","server_error?()","session()","settings()","settings()","settings()","slim()","status()","stream()","stylus()","success?()","textile()","time_for()","to()","to_s()","to_str()","unlink?()","uri()","url()","with_params()","wlang()","yajl()"],"longSearchIndex":["rack","rack::builder","sinatra","sinatra::application","sinatra::commonlogger","sinatra::extendedrack","sinatra::helpers","sinatra::helpers::stream","sinatra::helpers::stream::application","sinatra::helpers::stream::base","sinatra::helpers::stream::templates","sinatra::helpers::stream::templates::contenttyped","sinatra::helpers::stream::wrapper","sinatra::request","sinatra::request::acceptentry","sinatra::response","sinatra::showexceptions","sinatra::helpers::stream#<<()","sinatra::request::acceptentry#<=>()","sinatra::request#accept()","sinatra::request#accept?()","sinatra::helpers#attachment()","sinatra::helpers::stream#back()","sinatra::helpers#body()","sinatra::response#body=()","sinatra::helpers::stream::templates#builder()","sinatra::helpers::stream#cache_control()","sinatra::commonlogger#call()","sinatra::extendedrack#call()","sinatra::helpers::stream::base#call()","sinatra::helpers::stream::wrapper#call()","sinatra::showexceptions#call()","sinatra::commonlogger#call_without_check()","sinatra::helpers::stream#callback()","sinatra::helpers::stream#client_error?()","sinatra::helpers::stream#close()","sinatra::helpers::stream#closed?()","sinatra::helpers::stream::templates#coffee()","sinatra::helpers#content_type()","sinatra::helpers::stream::templates#creole()","sinatra::helpers::stream::defer()","sinatra::helpers::stream#each()","sinatra::response#each()","sinatra::helpers::stream::templates#erb()","sinatra::helpers#error()","sinatra::helpers::stream::templates#erubis()","sinatra::helpers::stream#etag()","sinatra::helpers::stream#etag_matches?()","sinatra::helpers::stream#expires()","sinatra::helpers::stream::templates#find_template()","sinatra::response#finish()","sinatra::helpers::stream::base#forward()","sinatra::request#forwarded?()","sinatra::helpers::stream::base#halt()","sinatra::helpers::stream::templates#haml()","sinatra::helpers#headers()","sinatra::helpers::stream::wrapper#helpers()","sinatra::request#idempotent?()","sinatra::helpers::stream#informational?()","sinatra::helpers::stream::wrapper#inspect()","sinatra::helpers::stream#last_modified()","sinatra::helpers::stream::templates#less()","sinatra::request#link?()","sinatra::helpers::stream::templates#liquid()","sinatra::helpers#logger()","sinatra::helpers::stream::templates#markaby()","sinatra::helpers::stream::templates#markdown()","sinatra::request::acceptentry#method_missing()","sinatra::helpers#mime_type()","sinatra::helpers::stream::new()","sinatra::helpers::stream::base::new()","sinatra::helpers::stream::templates::new()","sinatra::helpers::stream::wrapper::new()","sinatra::request::acceptentry::new()","sinatra::response::new()","sinatra::showexceptions::new()","sinatra::helpers::stream::templates#nokogiri()","sinatra::helpers#not_found()","sinatra::helpers::stream#not_found?()","sinatra::helpers::stream::base#options()","sinatra::helpers::stream::base#pass()","sinatra::request#preferred_type()","sinatra::request::acceptentry#priority()","sinatra::helpers::stream::templates#rabl()","sinatra::helpers::stream::templates#radius()","sinatra::helpers::stream::templates#rdoc()","sinatra::helpers#redirect()","sinatra::helpers::stream#redirect?()","sinatra::request::acceptentry#respond_to?()","sinatra::request#safe?()","sinatra::helpers::stream::templates#sass()","sinatra::helpers::stream::schedule()","sinatra::helpers::stream::templates#scss()","sinatra::helpers#send_file()","sinatra::helpers::stream#server_error?()","sinatra::helpers#session()","sinatra::helpers::stream::base#settings()","sinatra::helpers::stream::base::settings()","sinatra::helpers::stream::wrapper#settings()","sinatra::helpers::stream::templates#slim()","sinatra::helpers#status()","sinatra::helpers::stream#stream()","sinatra::helpers::stream::templates#stylus()","sinatra::helpers::stream#success?()","sinatra::helpers::stream::templates#textile()","sinatra::helpers::stream#time_for()","sinatra::helpers#to()","sinatra::request::acceptentry#to_s()","sinatra::request::acceptentry#to_str()","sinatra::request#unlink?()","sinatra::helpers#uri()","sinatra::helpers#url()","sinatra::helpers::stream#with_params()","sinatra::helpers::stream::templates#wlang()","sinatra::helpers::stream::templates#yajl()"],"info":[["Rack","","classes/Rack.html","",""],["Rack::Builder","","classes/Rack/Builder.html","",""],["Sinatra","","classes/Sinatra.html","",""],["Sinatra::Application","","classes/Sinatra/Application.html","",""],["Sinatra::CommonLogger","","classes/Sinatra/CommonLogger.html","","<p>Behaves exactly like Rack::CommonLogger with the notable exception that it\ndoes nothing, if another  …\n"],["Sinatra::ExtendedRack","","classes/Sinatra/ExtendedRack.html","","<p>Some Rack handlers (Thin, Rainbows!) implement an extended body object\nprotocol, however, some middleware …\n"],["Sinatra::Helpers","","classes/Sinatra/Helpers.html","","<p>Methods available to routes, before/after filters, and views.\n"],["Sinatra::Helpers::Stream","","classes/Sinatra/Helpers/Stream.html","","<p>Class of the response body in case you use #stream.\n<p>Three things really matter: The front and back block …\n"],["Sinatra::Helpers::Stream::Application","","classes/Sinatra/Helpers/Stream/Application.html","","<p>Execution context for classic style (top-level) applications. All DSL\nmethods executed on main are delegated …\n"],["Sinatra::Helpers::Stream::Base","","classes/Sinatra/Helpers/Stream/Base.html","","<p>Base class for all Sinatra applications and middleware.\n"],["Sinatra::Helpers::Stream::Templates","","classes/Sinatra/Helpers/Stream/Templates.html","","<p>Template rendering methods. Each method takes the name of a template to\nrender as a Symbol and returns …\n"],["Sinatra::Helpers::Stream::Templates::ContentTyped","","classes/Sinatra/Helpers/Stream/Templates/ContentTyped.html","",""],["Sinatra::Helpers::Stream::Wrapper","","classes/Sinatra/Helpers/Stream/Wrapper.html","",""],["Sinatra::Request","","classes/Sinatra/Request.html","","<p>The request object. See Rack::Request for more info:\nrack.rubyforge.org/doc/classes/Rack/Request.html …\n"],["Sinatra::Request::AcceptEntry","","classes/Sinatra/Request/AcceptEntry.html","",""],["Sinatra::Response","","classes/Sinatra/Response.html","","<p>The response object. See Rack::Response and Rack::Response::Helpers for\nmore info: rack.rubyforge.org/doc/classes/Rack/Response.html …\n"],["Sinatra::ShowExceptions","","classes/Sinatra/ShowExceptions.html","","<p>Sinatra::ShowExceptions catches all exceptions raised from the app it\nwraps. It shows a useful backtrace …\n"],["<<","Sinatra::Helpers::Stream","classes/Sinatra/Helpers/Stream.html#method-i-3C-3C","(data)",""],["<=>","Sinatra::Request::AcceptEntry","classes/Sinatra/Request/AcceptEntry.html#method-i-3C-3D-3E","(other)",""],["accept","Sinatra::Request","classes/Sinatra/Request.html#method-i-accept","()","<p>Returns an array of acceptable media types for the response\n"],["accept?","Sinatra::Request","classes/Sinatra/Request.html#method-i-accept-3F","(type)",""],["attachment","Sinatra::Helpers","classes/Sinatra/Helpers.html#method-i-attachment","(filename = nil, disposition = 'attachment')","<p>Set the Content-Disposition to “attachment” with the specified filename,\ninstructing the user …\n"],["back","Sinatra::Helpers::Stream","classes/Sinatra/Helpers/Stream.html#method-i-back","()","<p>Sugar for redirect (example:  redirect back)\n"],["body","Sinatra::Helpers","classes/Sinatra/Helpers.html#method-i-body","(value = nil, &block)","<p>Set or retrieve the response body. When a block is given, evaluation is\ndeferred until the body is read …\n"],["body=","Sinatra::Response","classes/Sinatra/Response.html#method-i-body-3D","(value)",""],["builder","Sinatra::Helpers::Stream::Templates","classes/Sinatra/Helpers/Stream/Templates.html#method-i-builder","(template = nil, options = {}, locals = {}, &block)",""],["cache_control","Sinatra::Helpers::Stream","classes/Sinatra/Helpers/Stream.html#method-i-cache_control","(*values)","<p>Specify response freshness policy for HTTP caches (Cache-Control header).\nAny number of non-value directives …\n"],["call","Sinatra::CommonLogger","classes/Sinatra/CommonLogger.html#method-i-call","(env)",""],["call","Sinatra::ExtendedRack","classes/Sinatra/ExtendedRack.html#method-i-call","(env)",""],["call","Sinatra::Helpers::Stream::Base","classes/Sinatra/Helpers/Stream/Base.html#method-i-call","(env)","<p>Rack call interface.\n"],["call","Sinatra::Helpers::Stream::Wrapper","classes/Sinatra/Helpers/Stream/Wrapper.html#method-i-call","(env)",""],["call","Sinatra::ShowExceptions","classes/Sinatra/ShowExceptions.html#method-i-call","(env)",""],["call_without_check","Sinatra::CommonLogger","classes/Sinatra/CommonLogger.html#method-i-call_without_check","(env)",""],["callback","Sinatra::Helpers::Stream","classes/Sinatra/Helpers/Stream.html#method-i-callback","(&block)",""],["client_error?","Sinatra::Helpers::Stream","classes/Sinatra/Helpers/Stream.html#method-i-client_error-3F","()","<p>whether or not the status is set to 4xx\n"],["close","Sinatra::Helpers::Stream","classes/Sinatra/Helpers/Stream.html#method-i-close","()",""],["closed?","Sinatra::Helpers::Stream","classes/Sinatra/Helpers/Stream.html#method-i-closed-3F","()",""],["coffee","Sinatra::Helpers::Stream::Templates","classes/Sinatra/Helpers/Stream/Templates.html#method-i-coffee","(template, options = {}, locals = {})",""],["content_type","Sinatra::Helpers","classes/Sinatra/Helpers.html#method-i-content_type","(type = nil, params = {})","<p>Set the Content-Type of the response body given a media type or file\nextension.\n"],["creole","Sinatra::Helpers::Stream::Templates","classes/Sinatra/Helpers/Stream/Templates.html#method-i-creole","(template, options = {}, locals = {})",""],["defer","Sinatra::Helpers::Stream","classes/Sinatra/Helpers/Stream.html#method-c-defer","(*)",""],["each","Sinatra::Helpers::Stream","classes/Sinatra/Helpers/Stream.html#method-i-each","(&front)",""],["each","Sinatra::Response","classes/Sinatra/Response.html#method-i-each","()",""],["erb","Sinatra::Helpers::Stream::Templates","classes/Sinatra/Helpers/Stream/Templates.html#method-i-erb","(template, options = {}, locals = {}, &block)",""],["error","Sinatra::Helpers","classes/Sinatra/Helpers.html#method-i-error","(code, body = nil)","<p>Halt processing and return the error status provided.\n"],["erubis","Sinatra::Helpers::Stream::Templates","classes/Sinatra/Helpers/Stream/Templates.html#method-i-erubis","(template, options = {}, locals = {})",""],["etag","Sinatra::Helpers::Stream","classes/Sinatra/Helpers/Stream.html#method-i-etag","(value, options = {})","<p>Set the response entity tag (HTTP &#39;ETag&#39; header) and halt if\nconditional GET matches. The <code>value</code> …\n"],["etag_matches?","Sinatra::Helpers::Stream","classes/Sinatra/Helpers/Stream.html#method-i-etag_matches-3F","(list, new_resource = request.post?)","<p>Helper method checking if a ETag value list includes the current ETag.\n"],["expires","Sinatra::Helpers::Stream","classes/Sinatra/Helpers/Stream.html#method-i-expires","(amount, *values)","<p>Set the Expires header and Cache-Control/max-age directive. Amount can be\nan integer number of seconds …\n"],["find_template","Sinatra::Helpers::Stream::Templates","classes/Sinatra/Helpers/Stream/Templates.html#method-i-find_template","(views, name, engine)","<p>Calls the given block for every possible template file in views, named\nname.ext, where ext is registered …\n"],["finish","Sinatra::Response","classes/Sinatra/Response.html#method-i-finish","()",""],["forward","Sinatra::Helpers::Stream::Base","classes/Sinatra/Helpers/Stream/Base.html#method-i-forward","()","<p>Forward the request to the downstream app – middleware only.\n"],["forwarded?","Sinatra::Request","classes/Sinatra/Request.html#method-i-forwarded-3F","()",""],["halt","Sinatra::Helpers::Stream::Base","classes/Sinatra/Helpers/Stream/Base.html#method-i-halt","(*response)","<p>Exit the current block, halts any further processing of the request, and\nreturns the specified response. …\n"],["haml","Sinatra::Helpers::Stream::Templates","classes/Sinatra/Helpers/Stream/Templates.html#method-i-haml","(template, options = {}, locals = {}, &block)",""],["headers","Sinatra::Helpers","classes/Sinatra/Helpers.html#method-i-headers","(hash = nil)","<p>Set multiple response headers with Hash.\n"],["helpers","Sinatra::Helpers::Stream::Wrapper","classes/Sinatra/Helpers/Stream/Wrapper.html#method-i-helpers","()",""],["idempotent?","Sinatra::Request","classes/Sinatra/Request.html#method-i-idempotent-3F","()",""],["informational?","Sinatra::Helpers::Stream","classes/Sinatra/Helpers/Stream.html#method-i-informational-3F","()","<p>whether or not the status is set to 1xx\n"],["inspect","Sinatra::Helpers::Stream::Wrapper","classes/Sinatra/Helpers/Stream/Wrapper.html#method-i-inspect","()",""],["last_modified","Sinatra::Helpers::Stream","classes/Sinatra/Helpers/Stream.html#method-i-last_modified","(time)","<p>Set the last modified time of the resource (HTTP &#39;Last-Modified&#39;\nheader) and halt if conditional …\n"],["less","Sinatra::Helpers::Stream::Templates","classes/Sinatra/Helpers/Stream/Templates.html#method-i-less","(template, options = {}, locals = {})",""],["link?","Sinatra::Request","classes/Sinatra/Request.html#method-i-link-3F","()",""],["liquid","Sinatra::Helpers::Stream::Templates","classes/Sinatra/Helpers/Stream/Templates.html#method-i-liquid","(template, options = {}, locals = {}, &block)",""],["logger","Sinatra::Helpers","classes/Sinatra/Helpers.html#method-i-logger","()","<p>Access shared logger object.\n"],["markaby","Sinatra::Helpers::Stream::Templates","classes/Sinatra/Helpers/Stream/Templates.html#method-i-markaby","(template = nil, options = {}, locals = {}, &block)",""],["markdown","Sinatra::Helpers::Stream::Templates","classes/Sinatra/Helpers/Stream/Templates.html#method-i-markdown","(template, options = {}, locals = {})",""],["method_missing","Sinatra::Request::AcceptEntry","classes/Sinatra/Request/AcceptEntry.html#method-i-method_missing","(*args, &block)",""],["mime_type","Sinatra::Helpers","classes/Sinatra/Helpers.html#method-i-mime_type","(type)","<p>Look up a media type by file extension in Rack&#39;s mime registry.\n"],["new","Sinatra::Helpers::Stream","classes/Sinatra/Helpers/Stream.html#method-c-new","(scheduler = self.class, keep_open = false, &back)",""],["new","Sinatra::Helpers::Stream::Base","classes/Sinatra/Helpers/Stream/Base.html#method-c-new","(app = nil)",""],["new","Sinatra::Helpers::Stream::Templates","classes/Sinatra/Helpers/Stream/Templates.html#method-c-new","()",""],["new","Sinatra::Helpers::Stream::Wrapper","classes/Sinatra/Helpers/Stream/Wrapper.html#method-c-new","(stack, instance)",""],["new","Sinatra::Request::AcceptEntry","classes/Sinatra/Request/AcceptEntry.html#method-c-new","(entry)",""],["new","Sinatra::Response","classes/Sinatra/Response.html#method-c-new","(*)",""],["new","Sinatra::ShowExceptions","classes/Sinatra/ShowExceptions.html#method-c-new","(app)",""],["nokogiri","Sinatra::Helpers::Stream::Templates","classes/Sinatra/Helpers/Stream/Templates.html#method-i-nokogiri","(template = nil, options = {}, locals = {}, &block)",""],["not_found","Sinatra::Helpers","classes/Sinatra/Helpers.html#method-i-not_found","(body = nil)","<p>Halt processing and return a 404 Not Found.\n"],["not_found?","Sinatra::Helpers::Stream","classes/Sinatra/Helpers/Stream.html#method-i-not_found-3F","()","<p>whether or not the status is set to 404\n"],["options","Sinatra::Helpers::Stream::Base","classes/Sinatra/Helpers/Stream/Base.html#method-i-options","()",""],["pass","Sinatra::Helpers::Stream::Base","classes/Sinatra/Helpers/Stream/Base.html#method-i-pass","(&block)","<p>Pass control to the next matching route. If there are no more matching\nroutes, Sinatra will return a …\n"],["preferred_type","Sinatra::Request","classes/Sinatra/Request.html#method-i-preferred_type","(*types)",""],["priority","Sinatra::Request::AcceptEntry","classes/Sinatra/Request/AcceptEntry.html#method-i-priority","()",""],["rabl","Sinatra::Helpers::Stream::Templates","classes/Sinatra/Helpers/Stream/Templates.html#method-i-rabl","(template, options = {}, locals = {})",""],["radius","Sinatra::Helpers::Stream::Templates","classes/Sinatra/Helpers/Stream/Templates.html#method-i-radius","(template, options = {}, locals = {})",""],["rdoc","Sinatra::Helpers::Stream::Templates","classes/Sinatra/Helpers/Stream/Templates.html#method-i-rdoc","(template, options = {}, locals = {})",""],["redirect","Sinatra::Helpers","classes/Sinatra/Helpers.html#method-i-redirect","(uri, *args)","<p>Halt processing and redirect to the URI provided.\n"],["redirect?","Sinatra::Helpers::Stream","classes/Sinatra/Helpers/Stream.html#method-i-redirect-3F","()","<p>whether or not the status is set to 3xx\n"],["respond_to?","Sinatra::Request::AcceptEntry","classes/Sinatra/Request/AcceptEntry.html#method-i-respond_to-3F","(*args)",""],["safe?","Sinatra::Request","classes/Sinatra/Request.html#method-i-safe-3F","()",""],["sass","Sinatra::Helpers::Stream::Templates","classes/Sinatra/Helpers/Stream/Templates.html#method-i-sass","(template, options = {}, locals = {})",""],["schedule","Sinatra::Helpers::Stream","classes/Sinatra/Helpers/Stream.html#method-c-schedule","(*)",""],["scss","Sinatra::Helpers::Stream::Templates","classes/Sinatra/Helpers/Stream/Templates.html#method-i-scss","(template, options = {}, locals = {})",""],["send_file","Sinatra::Helpers","classes/Sinatra/Helpers.html#method-i-send_file","(path, opts = {})","<p>Use the contents of the file at <code>path</code> as the response body.\n"],["server_error?","Sinatra::Helpers::Stream","classes/Sinatra/Helpers/Stream.html#method-i-server_error-3F","()","<p>whether or not the status is set to 5xx\n"],["session","Sinatra::Helpers","classes/Sinatra/Helpers.html#method-i-session","()","<p>Access the underlying Rack session.\n"],["settings","Sinatra::Helpers::Stream::Base","classes/Sinatra/Helpers/Stream/Base.html#method-i-settings","()","<p>Access settings defined with Base.set.\n"],["settings","Sinatra::Helpers::Stream::Base","classes/Sinatra/Helpers/Stream/Base.html#method-c-settings","()","<p>Access settings defined with Base.set.\n"],["settings","Sinatra::Helpers::Stream::Wrapper","classes/Sinatra/Helpers/Stream/Wrapper.html#method-i-settings","()",""],["slim","Sinatra::Helpers::Stream::Templates","classes/Sinatra/Helpers/Stream/Templates.html#method-i-slim","(template, options = {}, locals = {}, &block)",""],["status","Sinatra::Helpers","classes/Sinatra/Helpers.html#method-i-status","(value = nil)","<p>Set or retrieve the response status code.\n"],["stream","Sinatra::Helpers::Stream","classes/Sinatra/Helpers/Stream.html#method-i-stream","(keep_open = false)","<p>Allows to start sending data to the client even though later parts of the\nresponse body have not yet …\n"],["stylus","Sinatra::Helpers::Stream::Templates","classes/Sinatra/Helpers/Stream/Templates.html#method-i-stylus","(template, options={}, locals={})",""],["success?","Sinatra::Helpers::Stream","classes/Sinatra/Helpers/Stream.html#method-i-success-3F","()","<p>whether or not the status is set to 2xx\n"],["textile","Sinatra::Helpers::Stream::Templates","classes/Sinatra/Helpers/Stream/Templates.html#method-i-textile","(template, options = {}, locals = {})",""],["time_for","Sinatra::Helpers::Stream","classes/Sinatra/Helpers/Stream.html#method-i-time_for","(value)","<p>Generates a Time object from the given value. Used by #expires and\n#last_modified.\n"],["to","Sinatra::Helpers","classes/Sinatra/Helpers.html#method-i-to","(addr = nil, absolute = true, add_script_name = true)",""],["to_s","Sinatra::Request::AcceptEntry","classes/Sinatra/Request/AcceptEntry.html#method-i-to_s","(full = false)",""],["to_str","Sinatra::Request::AcceptEntry","classes/Sinatra/Request/AcceptEntry.html#method-i-to_str","()",""],["unlink?","Sinatra::Request","classes/Sinatra/Request.html#method-i-unlink-3F","()",""],["uri","Sinatra::Helpers","classes/Sinatra/Helpers.html#method-i-uri","(addr = nil, absolute = true, add_script_name = true)","<p>Generates the absolute URI for a given path in the app. Takes Rack routers\nand reverse proxies into account. …\n"],["url","Sinatra::Helpers","classes/Sinatra/Helpers.html#method-i-url","(addr = nil, absolute = true, add_script_name = true)",""],["with_params","Sinatra::Helpers::Stream","classes/Sinatra/Helpers/Stream.html#method-i-with_params","(temp_params)",""],["wlang","Sinatra::Helpers::Stream::Templates","classes/Sinatra/Helpers/Stream/Templates.html#method-i-wlang","(template, options = {}, locals = {}, &block)",""],["yajl","Sinatra::Helpers::Stream::Templates","classes/Sinatra/Helpers/Stream/Templates.html#method-i-yajl","(template, options = {}, locals = {})",""]]}}